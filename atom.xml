<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[天空下行走]]></title>
  <subtitle><![CDATA[Walk Around]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://ohroot.com/"/>
  <updated>2015-05-18T13:41:30.000Z</updated>
  <id>http://ohroot.com/</id>
  
  <author>
    <name><![CDATA[Direwolf]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[MySQL数据导入ElasticSearch]]></title>
    <link href="http://ohroot.com/2015/05/18/MySQL%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5ElasticSearch/"/>
    <id>http://ohroot.com/2015/05/18/MySQL数据导入ElasticSearch/</id>
    <published>2015-05-18T13:37:54.000Z</published>
    <updated>2015-05-18T13:41:30.000Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>
<p>Github上主要是有三个项目，分别是<a href="https://github.com/siddontang/go-mysql-elasticsearch" target="_blank" rel="external">go-mysql-elasticsearch</a>、<a href="https://github.com/jprante/elasticsearch-river-jdbc" target="_blank" rel="external">elasticsearch-river-jdbc</a>和<a href="https://github.com/scharron/elasticsearch-river-mysql" target="_blank" rel="external">elasticsearch-river-mysql</a></p>
<h2 id="go-mysql-elasticsearch">go-mysql-elasticsearch</h2><p>go-mysql-elasticsearch 是一个将MySQL数据导入到Elasticsearch的服务，他是用<code>mysqldump</code>来获取源数据，然后使用binlog同步数据，按照github上说明，他好像是使用go语言开发的一款工具，实现数据迁移。搭建需要go环境支持。<br>他主要可以实现：</p>
<ul>
<li>定制化同步，可修改index、type、field等</li>
<li>可增量同步</li>
<li>支持基于正则命名的index和type</li>
</ul>
<h2 id="elasticsearch-river-mysql">elasticsearch-river-mysql</h2><p>他需要安装一个Elasticsearch插件和一个小型的webserver<br>看了下，安装过程。。。步骤还是比较多，最后操作还是基于http的，example：<code>curl -XPUT &#39;localhost:9200/_river/mydb/_meta&#39; -d &#39;{ &quot;type&quot; : &quot;mysql&quot;, &quot;streamer&quot; : { &quot;host&quot; : &quot;localhost&quot;, &quot;port&quot; : 8080, }, &quot;mysql&quot; : { # Future usage to configure mysql access from the river. _ } }&#39;</code></p>
<h2 id="elasticsearch-river-jdbc">elasticsearch-river-jdbc</h2><p>他是一个JDBC插件，不仅仅支持mysql，还支持其他数据库。项目现在还在更新，让我感觉靠谱点<br><a href="https://github.com/jprante/elasticsearch-river-jdbc/wiki/Quickstart" target="_blank" rel="external">Quick start</a><br>安装方法：</p>
<ul>
<li><code>./bin/plugin --install jdbc --url http://xbib.org/repository/org/xbib/elasticsearch/plugin/elasticsearch-river-jdbc/1.5.0.5/elasticsearch-river-jdbc-1.5.0.5-plugin.zip</code></li>
<li><code>curl -o mysql-connector-java-5.1.35.zip -L &#39;http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.35.zip/from/http://cdn.mysql.com/&#39;</code></li>
<li>解压后<code>cp mysql-connector-java-5.1.28-bin.jar $ES_HOME/plugins/jdbc/</code>，即将mysql connect的一个jar文件拷贝到jdbc的目录下即可。</li>
</ul>
<p>参考文章</p>
<ul>
<li><a href="http://blog.randywallace.com/blog/2013/08/27/pulling-a-large-mysql-table-into-elasticsearch/" target="_blank" rel="external">Pulling a Large MySQL Table Into Elasticsearch</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<a id="more"></a>
<p>Github上主要是有三个项目，分别是<a href="https://github.com/siddontang/go-mysql-elasticsearch" target="_blank" rel="external">go-mys]]>
    </summary>
    
      <category term="ElasticSearch" scheme="http://ohroot.com/tags/ElasticSearch/"/>
    
      <category term="编程" scheme="http://ohroot.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[探索Elasticsearch]]></title>
    <link href="http://ohroot.com/2015/05/18/%E6%8E%A2%E7%B4%A2Elasticsearch/"/>
    <id>http://ohroot.com/2015/05/18/探索Elasticsearch/</id>
    <published>2015-05-18T13:37:36.000Z</published>
    <updated>2015-05-18T13:39:56.000Z</updated>
    <content type="html"><![CDATA[<p>Elasticsearch搞了一段时间了，各种曲折，好难受，把一些东西写出来，总结下把</p>
<a id="more"></a>
<p>如果想省去很多安装配置，可以直接使用elasticsearch的RTF版本， RTF是Ready To Fly的缩写，它是elasticsearch中文发行版，针对中文集成了相关插件，并带有Demo，方便新手学习,或者在生产环境中直接使用。地址：<a href="https://github.com/medcl/elasticsearch-rtf" target="_blank" rel="external">medcl/elasticsearch-rtf</a></p>
<h2 id="安装">安装</h2><p>Elasticsearch安装非常简单，官方都说是零配置。但是Elasticsearch安装需要java环境，需要先行安装。<br>然后下载Elasticsearch到你的机器上，文末附有下载链接，下载后解压到一个可执行文件夹，解压命令<code>tar -zvxf elasticsearch-1.5.0.tar.gz</code></p>
<h2 id="简单配置">简单配置</h2><p>修改<code>ES_HOME/config/elasticsearch.yml</code>文件，修改<code>node.name</code>的值为你的节点名称。如果配置集群需要将<code>cluster.name</code>设置为相同值，我们不修改就是了，直接用默认的elasticsearch。</p>
<p>此时访问<code>http://ip:9200/</code>就可显示集群的一些基本信息了</p>
<h2 id="工具安装">工具安装</h2><h3 id="elasticsearchservicewrapper安装">elasticsearchservicewrapper安装</h3><p>这个是对elasticsearch执行命令的包装服务，安装之后，方便elasticsearch的启动，停止等操作。</p>
<ol>
<li>下载elasticsearchservicewrapper，<code>git clone https://github.com/elasticsearch/elasticsearch-servicewrapper</code>，然后将目录下的service目录拷贝至ES_HOME/bin目录下。</li>
<li>简单配置jvm的内存，修改<code>ES_HOME/bin/service/elasticsearch.conf</code>，<code>set.default.ES_HEAP_SIZE=1024</code>，该值根据机器的配置可自定义，一般设置为机器内存的一半。</li>
<li>安装启动服务，执行命令：<code>ES_HOME/bin/service/elasticsearch install</code></li>
<li>启动/停止/重启服务，执行命令：<code>service elasticsearch start/stop/restart</code></li>
</ol>
<h3 id="插件安装">插件安装</h3><p>下面介绍几个实用的插件：</p>
<ol>
<li>head，非常实用的插件。通过head，可以查看集群几乎所有信息，还能进行简单的搜索查询，观察自动恢复的情况等等。安装方法<code>elasticsearch/bin/plugin -install mobz/elasticsearch-head</code>，安装完成后通过<code>http://ip:9200/_plugin/head/</code>，可以查看显示效果。</li>
<li>bigdesk，它是集群监控插件，通过该插件可以查看整个集群的资源消耗情况，cpu、内存、http链接等等。安装方法：<code>elasticsearch/bin/plugin -install lukas-vlcek/bigdesk</code>。安装完成之后通过：<code>http://ip:9200/_plugin/bigdesk/</code>，可以查看单个节点的资源使用情况，包括JVM、Thread Pools、OS、Process、HTTP&amp;Transport、Indice、File system等状况。</li>
<li>ik分词，github地址为：<a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="external">elasticsearch-analysis-ik</a>，其安装方法如下：<ul>
<li>在<code>ES_HOME/plugins</code>目录下新建插件目录analysis-ik。</li>
<li>将<a href="https://github.com/medcl/elasticsearch-rtf/blob/master/plugins/analysis-ik/elasticsearch-analysis-ik-1.2.6.jar" target="_blank" rel="external">https://github.com/medcl/elasticsearch-rtf/blob/master/plugins/analysis-ik/elasticsearch-analysis-ik-1.2.6.jar</a>  这个文件下载下来，放置到analysis-ik目录下。</li>
<li>将<a href="https://github.com/medcl/elasticsearch-rtf/tree/master/config/ik" target="_blank" rel="external">https://github.com/medcl/elasticsearch-rtf/tree/master/config/ik</a> 这个ik目录所有内容下载到 <code>ES_HOME/config</code>，目录下。</li>
<li>编辑文件<code>ES_HOME/config/elasticsearch.yml</code>,添加配置：<code>index.analysis.analyzer.ik.type : &#39;ik&#39;</code>。</li>
</ul>
</li>
</ol>
<h2 id="一些Elasticsearch的资源">一些Elasticsearch的资源</h2><ul>
<li><a href="http://www.elasticsearch.org/download/" target="_blank" rel="external">软件下载地址</a></li>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/client/php-api/current/index.html" target="_blank" rel="external">Elasticsearch-PHP接口描述</a></li>
<li><a href="http://learnes.sinaapp.com/index.html" target="_blank" rel="external">入门资料</a></li>
<li><a href="http://learnes.net/" target="_blank" rel="external">中文文档</a></li>
<li><a href="https://www.gitbook.com/book/endymecy/elasticsearch-guide-chinese/details" target="_blank" rel="external">中文指南</a></li>
<li><a href="https://www.gitbook.com/book/shgy/mastering-elasticsearch/details" target="_blank" rel="external">Mastering Elasticsearch(中文版)</a></li>
</ul>
<p>参考文章</p>
<ul>
<li><a href="http://my.oschina.net/xiaohui249/blog/228748" target="_blank" rel="external">ElasticSearch入门 —— 集群搭建</a></li>
<li><a href="http://segmentfault.com/a/1190000000448816" target="_blank" rel="external">elasticsearch初探</a></li>
<li><a href="http://blog.csdn.net/laigood/article/details/8207990" target="_blank" rel="external">分布式搜索elasticsearch集群监控工具bigdesk</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Elasticsearch搞了一段时间了，各种曲折，好难受，把一些东西写出来，总结下把</p>]]>
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://ohroot.com/tags/Elasticsearch/"/>
    
      <category term="编程" scheme="http://ohroot.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux下安装配置JDK8]]></title>
    <link href="http://ohroot.com/2015/05/18/Linux%E4%B8%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEJDK8/"/>
    <id>http://ohroot.com/2015/05/18/Linux下安装配置JDK8/</id>
    <published>2015-05-18T13:37:12.000Z</published>
    <updated>2015-05-18T13:43:44.000Z</updated>
    <content type="html"><![CDATA[<p>linux安装jdk的方法、笔记<br><a id="more"></a></p>
<h2 id="安装JDK8">安装JDK8</h2><ul>
<li><p>下载JDK,地址：<a href="http://www.oracle.com/technetwork/cn/java/javase/downloads/index.html" target="_blank" rel="external">click here</a></p>
</li>
<li><p>解压安装<br>我们把JDK安装到这个路径：<code>/usr/lib/jvm</code>,如果没有这个目录（第一次当然没有），我们就新建一个目录</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib</span><br><span class="line">sudo <span class="built_in">mkdir</span> jvm</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>建立好了以后，我们来到刚才下载好的压缩包的目录，解压到我们刚才新建的文件夹里面去，并且修改好名字方便我们管理<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo tar zxvf ./jdk-<span class="number">8</span>u20-linux-x64<span class="class">.tar</span><span class="class">.gz</span>  -C /usr/lib/jvm</span><br><span class="line">cd /usr/lib/jvm</span><br><span class="line">sudo mv <span class="function"><span class="title">jdk_</span><span class="params">(版本号)</span></span>/ jdk8</span><br></pre></td></tr></table></figure></p>
<ul>
<li>配置环境变量, <code>gedit ~/.bashrc</code>, 在打开的文件的末尾添加<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/jdk8</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>保存退出，然后输入下面的命令来使之生效<code>source ~/.bashrc</code></p>
<ul>
<li>配置默认JDK<br>由于一些Linux的发行版中已经存在默认的JDK，如OpenJDK等。所以为了使得我们刚才安装好的JDK版本能成为默认的JDK版本，我们还要进行下面的配置。<br>执行下面的命令：<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">update-alternatives --install <span class="regexp">/usr/</span>bin<span class="regexp">/java java /</span>usr<span class="regexp">/lib/</span>jvm<span class="regexp">/jdk8/</span>bin/java <span class="number">300</span> </span><br><span class="line">update-alternatives --install <span class="regexp">/usr/</span>bin<span class="regexp">/javac javac /</span>usr<span class="regexp">/lib/</span>jvm<span class="regexp">/jdk8/</span>bin/javac <span class="number">300</span> </span><br><span class="line">update-alternatives --install <span class="regexp">/usr/</span>bin<span class="regexp">/jar jar /</span>usr<span class="regexp">/lib/</span>jvm<span class="regexp">/jdk8/</span>bin/jar <span class="number">300</span>  </span><br><span class="line">update-alternatives --install <span class="regexp">/usr/</span>bin<span class="regexp">/javah javah /</span>usr<span class="regexp">/lib/</span>jvm<span class="regexp">/jdk8/</span>bin/javah <span class="number">300</span>  </span><br><span class="line">update-alternatives --install <span class="regexp">/usr/</span>bin<span class="regexp">/javap javap /</span>usr<span class="regexp">/lib/</span>jvm<span class="regexp">/jdk8/</span>bin/javap <span class="number">300</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>注意：如果以上两个命令出现找不到路径问题，只要重启一下计算机在重复上面两行代码就OK了。<br>执行下面的代码可以看到当前各种JDK版本和配置：<code>sudo update-alternatives --config java</code></p>
<ul>
<li>测试<br>打开一个终端，输入下面命令：<code>java -version</code>，显示java版本号，即表示java命令已经可以运行了。</li>
</ul>
<h2 id="安装_OpenJDK">安装 OpenJDK</h2><ol>
<li>安装 OpenJDK:<code>sudo apt-get install openjdk-6-jre</code></li>
<li>检查安装是否成功:<code>java -version</code></li>
<li>设置 JAVA_HOME 环境变量,在 <code>~/.bashrc</code> 中增加下面一行<code>export JAVA_HOME=/usr/lib/jvm/java-6-openjdk</code></li>
</ol>
<p>摘自：<a href="http://dawndiy.com/archives/155/" target="_blank" rel="external">Linux 下安装配置 JDK7</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>linux安装jdk的方法、笔记<br>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://ohroot.com/tags/Linux/"/>
    
      <category term="操作系统" scheme="http://ohroot.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[debian下给php安装curl]]></title>
    <link href="http://ohroot.com/2015/05/18/debian%E4%B8%8B%E7%BB%99php%E5%AE%89%E8%A3%85curl/"/>
    <id>http://ohroot.com/2015/05/18/debian下给php安装curl/</id>
    <published>2015-05-18T13:36:31.000Z</published>
    <updated>2015-05-18T13:44:59.000Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>
<p>查看自己的php5是否已经安装了curl。</p>
<ol>
<li>在web服务器目录（ debian下的通常为 /var/www )新建test.php文件</li>
<li>编辑文件，键入下面一行代码：<code>&lt;?php phpinfo(); ?&gt;</code></li>
<li>保存文件</li>
<li>打开浏览器，浏览该网页。例：<a href="http://localhost/test.php" target="_blank" rel="external">http://localhost/test.php</a></li>
<li>搜索”curl”,看看是否已经安装了curl。没搜到的话肯定是没装了。</li>
</ol>
<p>安装方法很简单，只需要一条命令。<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install curl libcurl3 libcurl3-dev php5-curl</span><br></pre></td></tr></table></figure></p>
<p>安装完毕。记得重启Apache服务器<code>/etc/init.d/apache2 restart</code></p>
<p>如果仍然有问题，尝试编辑你的php.ini文件（我的是/etc/php5/apache2/php.ini),在最后加上一行：<code>extension=curl.so</code></p>
<p>保存文件后重启Apache服务器。</p>
<p>安装gd过程类似，运行下面命令即可：<code>apt-get install php5-gd</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<a id="more"></a>
<p>查看自己的php5是否已经安装了curl。</p>
<ol>
<li>在web服务器目录（ debian下的通常为 /var/www )新建test.php文件</li>
<li>编辑文件，键入下面一行代码：<code>&lt;?php ]]>
    </summary>
    
      <category term="Linux" scheme="http://ohroot.com/tags/Linux/"/>
    
      <category term="编程" scheme="http://ohroot.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python进行Elasticsearch批量索引]]></title>
    <link href="http://ohroot.com/2015/04/28/python%E8%BF%9B%E8%A1%8CElasticsearch%E6%89%B9%E9%87%8F%E7%B4%A2%E5%BC%95/"/>
    <id>http://ohroot.com/2015/04/28/python进行Elasticsearch批量索引/</id>
    <published>2015-04-28T07:23:58.000Z</published>
    <updated>2015-04-28T07:27:18.000Z</updated>
    <content type="html"><![CDATA[<p>本文分享使用python脚本进行Elasticsearch的批量索引<br><a id="more"></a><br>之前主要还是采用jdbc-river的方式将数据从MySQL索引到Elasticsearch，但是由于有些数据表字符各种奇怪的，导入总是报各种错，于是自己折腾个python脚本导入数据，这里列出主要函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取表数据量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTablesCounts</span><span class="params">(_cursor, _tablename)</span>:</span></span><br><span class="line">    _querySQL = <span class="string">'select count(*) from `%s`'</span>%_tablename</span><br><span class="line">    retNum = _cursor.execute(_querySQL)</span><br><span class="line">    <span class="keyword">return</span> _cursor.fetchone();</span><br><span class="line"></span><br><span class="line"><span class="comment">#从数据库中获取一条数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFromId</span><span class="params">(_cursor, _id,_tablename)</span>:</span></span><br><span class="line">    _querySQL = <span class="string">"select * from `%s` where id = %s "</span>%(_tablename, _id)</span><br><span class="line">    retNum = _cursor.execute(_querySQL)</span><br><span class="line">    <span class="keyword">return</span> _cursor.fetchone();</span><br><span class="line"></span><br><span class="line"><span class="comment">#将数据导入ES，bulk数据的大小为500000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bulkData</span><span class="params">(_cur, _tableCounts)</span>:</span></span><br><span class="line">    es = Elasticsearch(<span class="string">"192.168.88.88"</span>)</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    count = _tableCounts</span><br><span class="line">    actions = []</span><br><span class="line">    <span class="keyword">while</span> (j &lt; count):</span><br><span class="line">        oneRec = getFromId(_cur, j+<span class="number">1</span>, tablename)</span><br><span class="line">        action = &#123;</span><br><span class="line">            <span class="string">"_index"</span>: indexname,</span><br><span class="line">            <span class="string">"_type"</span>: typename,</span><br><span class="line">            <span class="string">"_id"</span>: j + <span class="number">1</span>,</span><br><span class="line">            <span class="string">"_source"</span>: &#123;</span><br><span class="line">                <span class="string">"column1"</span>:oneRec[<span class="number">1</span>],</span><br><span class="line">                <span class="string">"column2"</span>:oneRec[<span class="number">2</span>],</span><br><span class="line">                <span class="string">"column3"</span>:oneRec[<span class="number">3</span>],</span><br><span class="line">                <span class="string">"column4"</span>:oneRec[<span class="number">4</span>],</span><br><span class="line">                <span class="string">"column5"</span>:oneRec[<span class="number">5</span>],</span><br><span class="line">                <span class="string">"column6"</span>:oneRec[<span class="number">6</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        actions.append(action)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (len(actions) == <span class="number">500000</span>):</span><br><span class="line">            <span class="keyword">print</span> j</span><br><span class="line">            helpers.bulk(es, actions)</span><br><span class="line">            <span class="keyword">del</span> actions[<span class="number">0</span>:len(actions)]</span><br><span class="line">    <span class="keyword">if</span> (len(actions) &gt; <span class="number">0</span>):</span><br><span class="line">        helpers.bulk(es, actions)</span><br><span class="line">        <span class="keyword">del</span> actions[<span class="number">0</span>:len(actions)]</span><br></pre></td></tr></table></figure></p>
<p>【参考文章】</p>
<ul>
<li><a href="http://www.justinablog.com/archives/967" target="_blank" rel="external">使用Python进行Elasticsearch数据索引</a></li>
<li><a href="http://chenlinux.com/2015/02/11/python-elasticsearch-bulk/" target="_blank" rel="external">Python 批量写入 Elasticsearch 脚本</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文分享使用python脚本进行Elasticsearch的批量索引<br>]]>
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://ohroot.com/tags/Elasticsearch/"/>
    
      <category term="python" scheme="http://ohroot.com/tags/python/"/>
    
      <category term="编程" scheme="http://ohroot.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我与Shadowsocks]]></title>
    <link href="http://ohroot.com/2015/04/16/%E6%88%91%E4%B8%8EShadowsocks/"/>
    <id>http://ohroot.com/2015/04/16/我与Shadowsocks/</id>
    <published>2015-04-16T06:09:00.000Z</published>
    <updated>2015-04-16T06:17:27.000Z</updated>
    <content type="html"><![CDATA[<p>之前一直采用Goagent应对GFW问题，这几日发现实在卡的不得了，有些链接都打不开了，于是就看下有没有啥好的替换方案，就去看了下Shadowsocks，发现使用起来还是非常简单方便的。<br><a id="more"></a></p>
<h2 id="资源链接">资源链接</h2><ol>
<li><a href="https://github.com/shadowsocks/shadowsocks" target="_blank" rel="external">Shadowsocks的Github地址</a>,这里有简单的使用说明</li>
<li><a href="http://sourceforge.net/projects/shadowsocksgui/files/dist/" target="_blank" rel="external">Windows客户端下载地址</a>，可根据<a href="https://github.com/shadowsocks/shadowsocks-csharp" target="_blank" rel="external">Github上该软件的说明</a>来下载对应的版本</li>
<li>免费的<a href="http://www.hidess.com/shadowsocks/" target="_blank" rel="external">服务端信息</a>，这个网站有提供免费的服务端</li>
</ol>
<h2 id="安装使用">安装使用</h2><h3 id="window平台">window平台</h3><p>直接下载对应版本的软件，双击执行就可以了，你的设备需要使用系统代理，我发现Shadowsocks还会有PAC，用过Goagent的人一定会觉得这两货功能还挺像</p>
<h3 id="Linux平台">Linux平台</h3><p>我用的是Ubuntu，所以我只记录下Ubuntu下的安装使用，其他的或许以后用到再更新吧。<br>好像有好多种方法可以使用，我就选择了安装有图形界面的，不是很习惯每次启动都要敲命令，Qt5版的安装方法如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>之前一直采用Goagent应对GFW问题，这几日发现实在卡的不得了，有些链接都打不开了，于是就看下有没有啥好的替换方案，就去看了下Shadowsocks，发现使用起来还是非常简单方便的。<br>]]>
    
    </summary>
    
      <category term="proxy" scheme="http://ohroot.com/tags/proxy/"/>
    
      <category term="工具使用" scheme="http://ohroot.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ubuntu14.04下修复flash版本问题]]></title>
    <link href="http://ohroot.com/2015/03/15/ubuntu14-04%E4%B8%8B%E4%BF%AE%E5%A4%8Dflash%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/"/>
    <id>http://ohroot.com/2015/03/15/ubuntu14-04下修复flash版本问题/</id>
    <published>2015-03-15T13:35:14.000Z</published>
    <updated>2015-03-15T13:38:55.000Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>
<p>之前一直用低版本的chrome下flash插件，今天听虾米音乐听不了，必须要解决下了。解决办法如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install pepperflashplugin-nonfree</span><br><span class="line">sudo update-pepperflashplugin-nonfree --install</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<a id="more"></a>
<p>之前一直用低版本的chrome下flash插件，今天听虾米音乐听不了，必须要解决下了。解决办法如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pr]]>
    </summary>
    
      <category term="Linux" scheme="http://ohroot.com/tags/Linux/"/>
    
      <category term="操作系统" scheme="http://ohroot.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从BSON文件到MySQL]]></title>
    <link href="http://ohroot.com/2015/03/12/%E4%BB%8EBSON%E6%96%87%E4%BB%B6%E5%88%B0MySQL/"/>
    <id>http://ohroot.com/2015/03/12/从BSON文件到MySQL/</id>
    <published>2015-03-12T13:56:35.000Z</published>
    <updated>2015-04-16T06:19:39.000Z</updated>
    <content type="html"><![CDATA[<p>我们获取到了一个BSON的数据文件，怎么将其导入到MySQL中呢，下面开始探索<br><a id="more"></a><br>Google下发现其为Mongodb的一种数据格式，然后便安装mongodb。解决思路。将数据恢复到mongodb，然后将数据导出成mysql可接受的格式，即CSV格式，然后导入到Mysql</p>
<h2 id="mongodbexport工具使用">mongodbexport工具使用</h2><p>mongoexport参数说明：<br>-h:指明数据库宿主机的IP<br>-u:指明数据库的用户名<br>-p:指明数据库的密码<br>-d:指明数据库的名字<br>-c:指明collection的名字<br>-f:指明要导出那些列<br>-o:指明到要导出的文件名<br>-q:指明导出数据的过滤条件</p>
<h3 id="数据导入mongodb">数据导入mongodb</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mongorestore <span class="operator">-d</span> mydb ~/data/data.bson    <span class="comment">#tank这个数据库的备份路径</span></span><br><span class="line">$ mongo</span><br><span class="line">&gt;show dbs         <span class="comment">#查看数据库</span></span><br><span class="line">&gt;use dbname     <span class="comment">#选择一个数据库</span></span><br><span class="line">&gt;db.tablename.find()    <span class="comment">#查看一个表的十条数据</span></span><br><span class="line">&gt;db.tablename.findOne()    <span class="comment">#查看一个表的一条数据，此命令可用于查询表“结构”</span></span><br><span class="line">&gt;db.dropDatabase()      <span class="comment">#数据导出完成后，删除数据库</span></span><br></pre></td></tr></table></figure>
<h2 id="mongodb导入到mysql">mongodb导入到mysql</h2><p><code>mongoexport -h 127.0.0.1 -d dbname -c tablename -f ziduan1,ziduan2 --type=csv -o webdata.csv</code><br>或<br><code>mongoexport -d dbname -c user -o user.dat</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line"><span class="operator"><span class="keyword">use</span> db;</span></span><br><span class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> ....;</span></span><br><span class="line"><span class="operator"><span class="keyword">LOAD</span> <span class="keyword">DATA</span> <span class="keyword">INFILE</span> <span class="string">'~/data/webdata.csv'</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> webhost;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们获取到了一个BSON的数据文件，怎么将其导入到MySQL中呢，下面开始探索<br>]]>
    
    </summary>
    
      <category term="Mongodb" scheme="http://ohroot.com/tags/Mongodb/"/>
    
      <category term="mysql" scheme="http://ohroot.com/tags/mysql/"/>
    
      <category term="数据库" scheme="http://ohroot.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL Cluster搭建]]></title>
    <link href="http://ohroot.com/2015/03/11/MySQL-Cluster%E6%90%AD%E5%BB%BA/"/>
    <id>http://ohroot.com/2015/03/11/MySQL-Cluster搭建/</id>
    <published>2015-03-11T11:09:45.000Z</published>
    <updated>2015-03-12T13:59:07.000Z</updated>
    <content type="html"><![CDATA[<p>配置了下MySQL Cluster，留下一点笔记<br><a id="more"></a></p>
<p>首先下载<a href="http://dev.mysql.com/downloads/cluster/" target="_blank" rel="external">mysql-cluster</a>,直接安装.</p>
<h2 id="安装SQL节点">安装SQL节点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> ~]<span class="comment"># groupadd mysql</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> ~]<span class="comment"># useradd -r -g mysql mysql</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> ~]<span class="comment"># cd /usr/local/</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> <span class="built_in">local</span>]<span class="comment"># ln -s /opt/mysql/server-5.6 mysql</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> <span class="built_in">local</span>]<span class="comment"># cd mysql</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> mysql]<span class="comment"># chown -R mysql .</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> mysql]<span class="comment"># chgrp -R mysql .</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> mysql]<span class="comment"># mkdir /data/mysql</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> mysql]<span class="comment"># chown -R mysql.mysql /data/mysql/</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> mysql]<span class="comment"># \cp support-files/my-large.cnf /etc/my.cnf </span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> mysql]<span class="comment"># /usr/local/mysql/scripts/mysql_install_db --user=mysql --datadir=/data/mysql/ --basedir=/usr/local/mysql # 这一步会出现错误,则apt-get install libaio1 libaio-dev</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> mysql]<span class="comment"># chown -R root .</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> mysql]<span class="comment"># cp support-files/mysql.server /etc/init.d/mysqld</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> mysql]<span class="comment"># chmod 755 /etc/init.d/mysqld </span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> mysql]<span class="comment"># echo "export PATH=$PATH:/usr/local/mysql/bin" &gt;&gt; /root/.bash_profile    #添加环境变量，执1命令方便一点</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> mysql]<span class="comment"># source /root/.bash_profile</span></span><br></pre></td></tr></table></figure>
<p>​<br>修改/etc/my.cnf配置文件，追加如下配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=/data/mysql</span><br><span class="line">basedir= /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">ndbcluster                         <span class="comment"># 运行NDB存储引擎</span></span><br><span class="line">ndb-connectstring=<span class="number">192.168</span>.<span class="number">0.1</span>     <span class="comment"># 管理节点</span></span><br><span class="line">[MYSQL_CLUSTER]</span><br><span class="line">ndb-connectstring=<span class="number">192.168</span>.<span class="number">0.1</span>     <span class="comment">#管理节点</span></span><br></pre></td></tr></table></figure></p>
<h2 id="安装NDB节点">安装NDB节点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.2</span> ~]<span class="comment"># groupadd mysql</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.2</span> ~]<span class="comment"># useradd -r -g mysql mysql</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.2</span> ~]<span class="comment"># cd /usr/local/</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.2</span> <span class="built_in">local</span>]<span class="comment"># ln -s /opt/mysql/server-5.6 mysql</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.2</span> <span class="built_in">local</span>]<span class="comment"># cd mysql</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.2</span> mysql]<span class="comment"># chown -R mysql .</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.2</span> mysql]<span class="comment"># chgrp -R mysql .</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.2</span> mysql]<span class="comment"># mkdir /data/mysql</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.2</span> mysql]<span class="comment"># chown -R mysql.mysql /data/mysql/</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.2</span> mysql]<span class="comment"># /usr/local/mysql/scripts/mysql_install_db --user=mysql --datadir=/data/mysql/ --basedir=/usr/local/mysql </span></span><br><span class="line"> 这一步会出现错误,则apt-get install libaio1 libaio-dev</span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.2</span> mysql]<span class="comment"># chown -R root .</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.2</span> mysql]<span class="comment"># \cp support-files/my-large.cnf /etc/my.cnf </span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.2</span> mysql]<span class="comment"># cp support-files/mysql.server /etc/init.d/mysqld</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.2</span> mysql]<span class="comment"># chmod 755 /etc/init.d/mysqld </span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.2</span> mysql]<span class="comment"># echo "export PATH=$PATH:/usr/local/mysql/bin" &gt;&gt; /root/.bash_profile</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.2</span> mysql]<span class="comment"># source /root/.bash_profile</span></span><br></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span> mysql]# mkdir /<span class="typedef"><span class="keyword">data</span>/mysql-cluster/<span class="keyword">data</span> -p</span></span><br></pre></td></tr></table></figure>
<p>上面这个目录用来存放NDB节点的数据，在管理节点里面也要配置为该目录，配置其他的目录会报错，说无法创建各种日志文件。上面提到的/data/mysql是用来在没使用NDB时存放的数据，和平时我们使用的mysql没有区别。</p>
<p>和SQL节点是一样的，修改/etc/my.cnf，追加如下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=/data/mysql</span><br><span class="line">basedir= /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">ndbcluster                         <span class="comment"># 运行NDB存储引擎</span></span><br><span class="line">ndb-connectstring=<span class="number">192.168</span>.<span class="number">0.1</span>     <span class="comment"># 管理节点</span></span><br><span class="line">[MYSQL_CLUSTER]</span><br><span class="line">ndb-connectstring=<span class="number">192.168</span>.<span class="number">0.1</span>     <span class="comment">#管理节点</span></span><br></pre></td></tr></table></figure></p>
<h2 id="安装管理节点">安装管理节点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> ~]<span class="comment"># mkdir /usr/local/mysql/bin -p                                      </span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> ~]<span class="comment"># scp 192.168.0.2:/usr/local/mysql/bin/ndb_mgm /usr/local/mysql/bin/</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> ~]<span class="comment"># scp 192.168.0.2:/usr/local/mysql/bin/ndb_mgmd /usr/local/mysql/bin/</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> ~]<span class="comment"># echo "export PATH=$PATH:/usr/local/mysql/bin" &gt;&gt; /root/.bash_profile</span></span><br><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> ~]<span class="comment"># source /root/.bash_profile</span></span><br></pre></td></tr></table></figure>
<p>我配置的管理节点和SQL节点在同一台机器上，所以上面的步骤不需要</p>
<ol>
<li><p>在/data/创建目录mysql-cluster，该目录会存放相关日志文件，以及pid号。并在目录中创建配置文件config.ini</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="localvars">@192</span><span class="number">.168</span><span class="number">.0</span><span class="number">.1</span> ~]<span class="preprocessor"># mkdir /data/mysql-cluster</span></span><br><span class="line">[root<span class="localvars">@192</span><span class="number">.168</span><span class="number">.0</span><span class="number">.1</span> ~]<span class="preprocessor"># cd /data/mysql-cluster/</span></span><br><span class="line">[root<span class="localvars">@192</span><span class="number">.168</span><span class="number">.0</span><span class="number">.1</span> mysql-cluster]<span class="preprocessor"># touch config.ini</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>config.ini文件配置如下</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="number">192.168</span>.<span class="number">0.1</span> ~]<span class="comment"># cat /data/mysql-cluster/config.ini </span></span><br><span class="line">[NDBD DEFAULT]</span><br><span class="line"><span class="variable">NoOfReplicas=</span><span class="number">1</span>                        <span class="comment">#每个数据节点的镜像数量，通常最低设置为2，否则就没有意义了，这里是方便后面测试。</span></span><br><span class="line"><span class="variable">DataMemory=</span><span class="number">64</span>M                        <span class="comment">#每个数据节点中给数据分配的内存</span></span><br><span class="line"><span class="variable">IndexMemory=</span><span class="number">16</span>M                       <span class="comment">#每个数据节点中给索引分配的内存</span></span><br><span class="line"><span class="comment">#管理节点</span></span><br><span class="line">[NDB_MGMD]</span><br><span class="line"><span class="variable">nodeid=</span><span class="number">1</span></span><br><span class="line"><span class="variable">hostname=</span><span class="number">192.168</span>.<span class="number">0.1</span>                 <span class="comment">#管理节点ip</span></span><br><span class="line"><span class="variable">datadir=</span>/data/mysql-cluster           <span class="comment">#管理节点数据目录,存放相关日志，以及pid文件</span></span><br><span class="line"><span class="comment">#第一个 ndbd 节点:</span></span><br><span class="line">[NDBD]</span><br><span class="line"><span class="variable">nodeid=</span><span class="number">2</span></span><br><span class="line"><span class="variable">hostname=</span><span class="number">192.168</span>.<span class="number">0.2</span>                 <span class="comment">#数据节点ip地址</span></span><br><span class="line"><span class="variable">datadir=</span>/data/mysql-cluster/data</span><br><span class="line"><span class="comment">#第二个 ndbd 节点:</span></span><br><span class="line">[NDBD]</span><br><span class="line"><span class="variable">nodeid=</span><span class="number">3</span></span><br><span class="line"><span class="variable">hostname=</span><span class="number">192.168</span>.<span class="number">0.3</span></span><br><span class="line"><span class="variable">datadir=</span>/data/mysql-cluster/data     <span class="comment">#NDB点数据存放目录</span></span><br><span class="line"><span class="comment"># SQL node options:</span></span><br><span class="line">[MySQLD]</span><br><span class="line"><span class="variable">nodeid=</span><span class="number">4</span></span><br><span class="line"><span class="variable">hostname=</span><span class="number">192.168</span>.<span class="number">0.5</span>                <span class="comment">#SQL节点ip地址</span></span><br><span class="line">[MySQLD]</span><br><span class="line"><span class="variable">nodeid=</span><span class="number">5</span></span><br><span class="line"><span class="variable">hostname=</span><span class="number">192.168</span>.<span class="number">0.6</span></span><br><span class="line">[MySQLD]                         <span class="comment">#这里保留了一个空节点。否则停止NDB会报错：No free node id found for ndbd(NDB).</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>[NDB_MGMD] 表示管理节点的配置，只能有一个。<br>[NDBD DEFAULT] 表示每个数据节点的默认配置，在每个节点的[NDBD]中不用再写这些选项，只能有一个。<br>[NDBD] 表示每个数据节点的配置，可以有多个。<br>[MYSQLD] 表示SQL节点的配置，可以有多个，分别写上不同的SQL节点的ip地址；也可以不用写，只保留一个空节点，表示任意一个ip地址都可以进行访问。此节点的个数表明了可以用来连接数据节点的SQL节点总数。</p>
<h2 id="使用cluster">使用cluster</h2><p>启动顺序为：管理节点-&gt;数据节点-&gt;SQL节点</p>
<ol>
<li>启动管理节点：<code>ndb_mgmd -f /data/mysql-cluster/config.ini</code></li>
<li>启动NDB（数据节点）:<code>ndbd --initial</code><br><strong>注意：只是在第一次启动或在备份/恢复或配置变化后重启ndbd时，才加–initial参数！原因在于，该参数会使节点删除由早期ndbd实例创建的，用于恢复的任何文件，包括用于恢复的日志文件。</strong></li>
<li>启动SQL节点（启动mysql服务）:<code>/etc/init.d/mysqld start</code></li>
</ol>
<h2 id="MySQL_Cluster集群的关闭">MySQL Cluster集群的关闭</h2><p>关闭顺序：SQL节点-&gt;数据节点-&gt;管理节点</p>
<ol>
<li>SQL节点关闭:<code>/etc/init.d/mysqld stop</code></li>
<li>（NDB）数据节点关闭:<code>ndbd stop</code></li>
<li>管理节点关闭<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ndb_mgm&gt; <span class="keyword">shutdown</span></span><br><span class="line">Node <span class="number">2</span>: Cluster <span class="keyword">shutdown</span> initiated</span><br><span class="line">Node <span class="number">3</span>: Cluster <span class="keyword">shutdown</span> initiated</span><br><span class="line"><span class="number">3</span> NDB Cluster node(<span class="keyword">s</span>) have <span class="keyword">shutdown</span>.</span><br><span class="line">Disconnecting to allow management server to <span class="keyword">shutdown</span>.</span><br><span class="line">Node <span class="number">3</span>: Node <span class="keyword">shutdown</span> completed.</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>配置了下MySQL Cluster，留下一点笔记<br>]]>
    
    </summary>
    
      <category term="mysql" scheme="http://ohroot.com/tags/mysql/"/>
    
      <category term="数据库" scheme="http://ohroot.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mongodb取消开机自启动]]></title>
    <link href="http://ohroot.com/2015/03/11/Mongodb%E5%8F%96%E6%B6%88%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/"/>
    <id>http://ohroot.com/2015/03/11/Mongodb取消开机自启动/</id>
    <published>2015-03-11T11:07:27.000Z</published>
    <updated>2015-03-11T11:08:25.000Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>
<p>Ubuntu下安装的Mongodb默认开机自启动，在自己的开发环境下很不喜欢这样，这里给出取消开机自启动的方法</p>
<h2 id="配置方法">配置方法</h2><p>修改配置文件：<code>vim /etc/init/mongod.conf</code>，因为Ubuntu默认启动工作在runlevel2，则将配置文件中：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="literal">on</span> runlevel<span class="sqbracket"> [2345]</span></span><br><span class="line"><span class="keyword">stop</span> <span class="literal">on</span> runlevel<span class="sqbracket"> [06]</span></span><br></pre></td></tr></table></figure></p>
<p>改成<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="literal">on</span> runlevel<span class="sqbracket"> [345]</span></span><br><span class="line"><span class="keyword">stop</span> <span class="literal">on</span> runlevel<span class="sqbracket"> [026]</span></span><br></pre></td></tr></table></figure></p>
<p>mysql取消开机自启动的方法也是类似的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<a id="more"></a>
<p>Ubuntu下安装的Mongodb默认开机自启动，在自己的开发环境下很不喜欢这样，这里给出取消开机自启动的方法</p>
<h2 id="配置方法">配置方法</h2><p>修改配置文件：<code>vim /etc/init/mongod]]>
    </summary>
    
      <category term="Mongodb" scheme="http://ohroot.com/tags/Mongodb/"/>
    
      <category term="数据库" scheme="http://ohroot.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mongodb安装笔记]]></title>
    <link href="http://ohroot.com/2015/03/11/Mongodb%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/"/>
    <id>http://ohroot.com/2015/03/11/Mongodb安装笔记/</id>
    <published>2015-03-11T11:05:48.000Z</published>
    <updated>2015-03-27T07:10:32.000Z</updated>
    <content type="html"><![CDATA[<p>Mongodb初探<br><a id="more"></a><br>本文主要讲述ubuntu下安装Mongodb的简明教程</p>
<h2 id="安装Mongodb">安装Mongodb</h2><p>执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:<span class="number">80</span> --recv <span class="number">7</span>F0CEB10</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://repo.mongodb.org/apt/ubuntu "</span>$(lsb_release -sc)<span class="string">"/mongodb-org/3.0 multiverse"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-<span class="number">3.0</span>.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y mongodb-org</span><br></pre></td></tr></table></figure></p>
<h2 id="简单使用">简单使用</h2><p>MongoDB默认数据存储位置：<code>/var/lib/mongodb</code>，日志文件存储位置：<code>/var/log/mongodb</code>，配置文件位置：<code>/etc/mongod.conf</code>，可在配置文件中修改数据存储位置和日志文件存储位置。MongoDB默认的端口号为：27017。</p>
<ul>
<li>启用mongodb：<code>sudo service mongod start</code></li>
<li>停用mongodb：<code>sudo service mongod stop</code></li>
<li>重启mongodb：<code>sudo service mongod restart</code></li>
</ul>
<h2 id="MongoDB_的未授权访问漏洞">MongoDB 的未授权访问漏洞</h2><p>未授权访问漏洞成因：Mongodb 在启动的时候提供了很多参数，如日志记录到哪个文件夹，是否开启认证等。造成未授权访问的根本原因就在于启动Mongodb的时候未设置 —auth 也很少会有人会给数据库添加上账号密码（默认空口令，它像一张白纸，需要管理员自己去涂写账号)，使用默认空口令这将导致任何人无需进行账号认证就可以登陆到数据服务器。</p>
<h3 id="解决方法">解决方法</h3><ul>
<li>使用 iptables 控制端口 27017 (默认端口) 的访问;</li>
<li>auth 模式下运行 mongodb;</li>
</ul>
<h4 id="开启_MongoDB授权">开启 MongoDB授权</h4><ol>
<li><p>添加一个管理员用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; use admin</span><br><span class="line">&gt; db.createUser( </span><br><span class="line">&#123; </span><br><span class="line">    user: <span class="string">"root"</span>, </span><br><span class="line">    <span class="built_in">pwd</span>: <span class="string">"YOUR PASSWORD"</span>, </span><br><span class="line">    roles: </span><br><span class="line">    [ </span><br><span class="line">      &#123; </span><br><span class="line">        role: <span class="string">"userAdminAnyDatabase"</span>, </span><br><span class="line">        db: <span class="string">"admin"</span> </span><br><span class="line">      &#125; </span><br><span class="line">    ] </span><br><span class="line">  &#125; </span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>授权模式下运行 mongod</p>
</li>
</ol>
<ul>
<li><p>先停止服务:<code>$ sudo service mongod stop</code>。</p>
</li>
<li><p>编辑<code>/etc/mongod.conf</code>文件, 找到 <code>#auth=true</code> , 去掉注释。</p>
</li>
<li><p>重新运行服务:<code>$ sudo service mongod start</code>。</p>
</li>
<li><p>登录：<code>mongo admin -u 用户名 -p  密码 --port 端口号</code>。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Mongodb初探<br>]]>
    
    </summary>
    
      <category term="Mongodb" scheme="http://ohroot.com/tags/Mongodb/"/>
    
      <category term="数据库" scheme="http://ohroot.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[dnspod动态域名解析]]></title>
    <link href="http://ohroot.com/2015/03/11/dnspod%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/"/>
    <id>http://ohroot.com/2015/03/11/dnspod动态域名解析/</id>
    <published>2015-03-11T11:02:21.000Z</published>
    <updated>2015-03-11T11:05:06.000Z</updated>
    <content type="html"><![CDATA[<p>dnspod动态域名解析，write up.<br><a id="more"></a><br>添加DNSPOD记录</p>
<p><a href="www.dnspod.cn/docs/index.html">api文档https</a><br><a href="https://gist.github.com/chuangbo/833369" target="_blank" rel="external">动态解析demo</a></p>
<p>获得domain_id可以用curl<br><code>curl -k https://dnsapi.cn/Domain.List -d &quot;login_email=xxx&amp;login_password=xxx&quot;</code><br>获得record_id<br><code>curl -k https://dnsapi.cn/Record.List -d &quot;login_email=xxx&amp;login_password=xxx&amp;domain_id=xxx&quot;</code></p>
<p>开机的时候自动运行这个脚本 ,在/etc/rc.local中加入一行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run pypod.py ddns</span></span><br><span class="line">/usr/bin/python /home/pi/pypod.py</span><br></pre></td></tr></table></figure></p>
<p>DNSPOD动态域名解析，ip获取有误修复<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> httplib, urllib</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"> </span><br><span class="line">params = dict(</span><br><span class="line">    login_email=<span class="string">"hisen@xx.com"</span>, <span class="comment"># replace with your email</span></span><br><span class="line">    login_password=<span class="string">"pwd"</span>, <span class="comment"># replace with your password</span></span><br><span class="line">    format=<span class="string">"json"</span>,</span><br><span class="line">    domain_id=xxxxxx, <span class="comment"># replace with your domain_od, can get it by API Domain.List</span></span><br><span class="line">    record_id=xxxxxx, <span class="comment"># replace with your record_id, can get it by API Record.List</span></span><br><span class="line">    sub_domain=<span class="string">"pi"</span>, <span class="comment"># replace with your sub_domain</span></span><br><span class="line">    record_line=<span class="string">"默认"</span>,</span><br><span class="line">)</span><br><span class="line">current_ip = <span class="keyword">None</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ddns</span><span class="params">(ip)</span>:</span></span><br><span class="line">    params.update(dict(value=ip))</span><br><span class="line">    headers = &#123;<span class="string">"Content-type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>, <span class="string">"Accept"</span>: <span class="string">"text/json"</span>&#125;</span><br><span class="line">    conn = httplib.HTTPSConnection(<span class="string">"dnsapi.cn"</span>)</span><br><span class="line">    conn.request(<span class="string">"POST"</span>, <span class="string">"/Record.Ddns"</span>, urllib.urlencode(params), headers)</span><br><span class="line"> </span><br><span class="line">    response = conn.getresponse()</span><br><span class="line">    <span class="keyword">print</span> response.status, response.reason</span><br><span class="line">    data = response.read()</span><br><span class="line">    <span class="keyword">print</span> data</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">return</span> response.status == <span class="number">200</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getip</span><span class="params">()</span>:</span></span><br><span class="line">    url=<span class="string">'http://ip.taobao.com/service/getIpInfo.php?ip=myip'</span></span><br><span class="line">    page=urllib.urlopen(url)</span><br><span class="line">    data=page.read()</span><br><span class="line">    jsondata=json.loads(data)</span><br><span class="line">    ip = jsondata[<span class="string">'data'</span>][<span class="string">'ip'</span>]</span><br><span class="line">    <span class="keyword">return</span> ip</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ip = getip()</span><br><span class="line">            <span class="keyword">print</span> ip</span><br><span class="line">            <span class="keyword">if</span> current_ip != ip:</span><br><span class="line">                <span class="keyword">if</span> ddns(ip):</span><br><span class="line">                    current_ip = ip</span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            <span class="keyword">print</span> e</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        time.sleep(<span class="number">30</span>)</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>dnspod动态域名解析，write up.<br>]]>
    
    </summary>
    
      <category term="Web运维" scheme="http://ohroot.com/tags/Web%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Web运维" scheme="http://ohroot.com/categories/Web%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MYSQL数据文件恢复]]></title>
    <link href="http://ohroot.com/2014/12/22/MYSQL%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D/"/>
    <id>http://ohroot.com/2014/12/22/MYSQL数据文件恢复/</id>
    <published>2014-12-22T09:57:29.000Z</published>
    <updated>2014-12-22T12:03:05.000Z</updated>
    <content type="html"><![CDATA[<p>有那么三个mysql问的文件,后缀为.frm.MYD.MYI,表的引擎是MyISAM,故事就是发生在这样的背景下<br><a id="more"></a></p>
<h2 id="前言">前言</h2><p>本来MyISAM引擎的数据库文件,直接把这三个文件拷贝到对应的数据库文件夹下,对于Linux就再改一下权限就可以了,但是今天遇到了问题,导进去没能成功查询数据.数据很关键,决定想办法解决下.</p>
<p>首先介绍下这三个文件<br>.frm文件: 这是表结构描述方面的文件<br>.MYD文件: 这是表的数据文件<br>.MYI文件: 这是数据表关于索引的文件</p>
<h2 id="解决办法">解决办法</h2><p>首先把.frm文件拷贝到数据库目录下,然后建立两个空白文件,分别命名为<code>tablename.MYI</code>,<code>tablename.MYD</code>,把tablename换成对应的表名,然后再查看数据库就能看到数据表,只是表中内容是空的.<br>这时再把原来的MYI和MYD文件拷贝回来,替换掉两个空的MYI,MYD文件.</p>
<p>下面再去看看数据库里面,表已经能正常执行增删改查了.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有那么三个mysql问的文件,后缀为.frm.MYD.MYI,表的引擎是MyISAM,故事就是发生在这样的背景下<br>]]>
    
    </summary>
    
      <category term="mysql" scheme="http://ohroot.com/tags/mysql/"/>
    
      <category term="数据库" scheme="http://ohroot.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux配置证书登陆]]></title>
    <link href="http://ohroot.com/2014/12/20/linux%E9%85%8D%E7%BD%AE%E8%AF%81%E4%B9%A6%E7%99%BB%E9%99%86/"/>
    <id>http://ohroot.com/2014/12/20/linux配置证书登陆/</id>
    <published>2014-12-20T03:11:46.000Z</published>
    <updated>2014-12-20T04:26:30.000Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="客户端建立私钥和公钥">客户端建立私钥和公钥</h2><p>在客户端终端运行命令<code>ssh-keygen -t rsa</code><br>密码算法我们选择rsa，还有一种是dsa，证书登录常用的是rsa。<br>执行 ssh-keygen 时，才会在我的home目录底下的 .ssh/ 这个目录里面产生所需要的两把 Keys ，分别是私钥 (id_rsa) 与公钥 (id_rsa.pub)。为了安全我们最好对公钥设置上密码.</p>
<h2 id="ssh服务端配置">ssh服务端配置</h2><p>ssh服务器配置如下:</p>
<p>vim /etc/ssh/sshd_config<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用root账户登录，非必要，但为了安全性，请配置</span></span><br><span class="line"><span class="title">PermitRootLogin</span> <span class="built_in">no</span></span><br><span class="line"><span class="comment"># 是否让 sshd 去检查用户家目录或相关档案的权限数据，这是为了担心使用者将某些重要档案的权限设错，可能会导致一些问题所致。例如使用者的 ~.ssh/ 权限设错时，某些特殊情况下会不许用户登入.</span></span><br><span class="line">StrictModes <span class="built_in">no</span></span><br><span class="line"><span class="comment"># 是否允许用户自行使用成对的密钥系统进行登入行为，仅针对 version 2。</span></span><br><span class="line"><span class="comment"># 至于自制的公钥数据就放置于用户家目录下的 .ssh/authorized_keys 内</span></span><br><span class="line">RSAAuthentication <span class="built_in">yes</span></span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span></span><br><span class="line">AuthorizedKeysFile %h/.ssh/authorized_keys</span><br><span class="line"><span class="comment">#有了证书登录了，就禁用密码登录吧，安全要紧</span></span><br><span class="line">PasswordAuthentication <span class="built_in">no</span></span><br></pre></td></tr></table></figure></p>
<p>配置好ssh服务器的配置了，那么我们就要把客户端的公钥上传到服务器端，然后把客户端的公钥添加到authorized_keys</p>
<p>在客户端执行命令<br><code>scp ~/.ssh/id_rsa.pub root@&lt;ssh_server_ip&gt;:~</code><br>在服务端执行命令<br><code>cp  id_rsa.pub ～/.ssh/authorized_keys</code><br>如果有修改配置/etc/ssh/sshd_config，需要重启ssh服务器<br><code>service sshd restart</code></p>
<h2 id="客户端通过私钥登录ssh服务器">客户端通过私钥登录ssh服务器</h2><ul>
<li>ssh命令<br><code>ssh -i ~/.ssh/id_rsa root@&lt;ssh_server_ip&gt;</code></li>
<li>scp命令<br>`scp -i ~/.ssh/id_rsa filename root@<ssh_server_ip>:/filepath<br>每次敲命令，都要指定私钥，是一个很繁琐的事情，所以我们可以把私钥的路径加入ssh客户端的默认配置里<br>修改/etc/ssh/ssh_config<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认id_rsa就已经加入私钥的路径了</span></span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"><span class="comment">#如果有其他的私钥，还要再加入其他私钥的路径则在文件里面添加</span></span><br><span class="line">IdentityFile ~/.ssh/other_rsa</span><br></pre></td></tr></table></figure>
</ssh_server_ip></li>
</ul>
<h2 id="windows上使用">windows上使用</h2><p>这里生成的公钥是OpenSSH格式,在window上可以通过小工具puttygen,点击窗口上的’Conversions’-&gt;’Import key’ 导入这个公钥,然后再导出成putty支持的证书格式即可使用putty登陆.<br>putty登陆指定证书方法:先正常填写IP,然后点击左侧的’Connection’-&gt;’SSH’-&gt;’Auth’,点击’Browse’导入公钥文件即可.<br>如果你是从windows的puttygen生成的公私钥,一样的需要导出成linux支持的OpenSSH格式.</p>
]]></content>
    <summary type="html">
    <![CDATA[<a id="more"></a>
<h2 id="客户端建立私钥和公钥">客户端建立私钥和公钥</h2><p>在客户端终端运行命令<code>ssh-keygen -t rsa</code><br>密码算法我们选择rsa，还有一种是dsa，证书登录常用的是rsa。<br>执行 ]]>
    </summary>
    
      <category term="Linux" scheme="http://ohroot.com/tags/Linux/"/>
    
      <category term="操作系统" scheme="http://ohroot.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux安装为知笔记]]></title>
    <link href="http://ohroot.com/2014/12/20/linux%E5%AE%89%E8%A3%85%E4%B8%BA%E7%9F%A5%E7%AC%94%E8%AE%B0/"/>
    <id>http://ohroot.com/2014/12/20/linux安装为知笔记/</id>
    <published>2014-12-20T02:42:38.000Z</published>
    <updated>2014-12-20T02:47:19.000Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>
<p>为知笔记无脑安装过程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:wiznote-team</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install wiznote</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<a id="more"></a>
<p>为知笔记无脑安装过程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span cl]]>
    </summary>
    
      <category term="Linux" scheme="http://ohroot.com/tags/Linux/"/>
    
      <category term="操作系统" scheme="http://ohroot.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ubuntu安装nodejs]]></title>
    <link href="http://ohroot.com/2014/12/19/ubuntu%E5%AE%89%E8%A3%85nodejs/"/>
    <id>http://ohroot.com/2014/12/19/ubuntu安装nodejs/</id>
    <published>2014-12-19T14:22:02.000Z</published>
    <updated>2014-12-19T14:24:42.000Z</updated>
    <content type="html"><![CDATA[<p>ubuntu 安装nodejs 无脑操作…<br><a id="more"></a><br>两条命令搞定</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="operator">-s</span>L https://deb.nodesource.com/setup | sudo bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>ubuntu 安装nodejs 无脑操作…<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://ohroot.com/tags/hexo/"/>
    
      <category term="操作系统" scheme="http://ohroot.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CentOS搭建VPN]]></title>
    <link href="http://ohroot.com/2014/12/17/CentOS%E6%90%AD%E5%BB%BAVPN/"/>
    <id>http://ohroot.com/2014/12/17/CentOS搭建VPN/</id>
    <published>2014-12-17T13:12:43.000Z</published>
    <updated>2014-12-29T13:58:27.000Z</updated>
    <content type="html"><![CDATA[<p>搭建了一个L2TP+IPSec的VPN,对于小菜来说着实花了一番功夫…记录过程与此<br><a id="more"></a></p>
<h2 id="搭建L2TP+IPSec_VPN">搭建L2TP+IPSec VPN</h2><p>搭建VPN的时候，仔细了解了下现在的三种VPN。分别是PPTP、IPSec/L2TP、OpenVPN，经过比较，我决定先尝试搭建一个IPSec/L2TP的VPN。<br>唉，网上资料好多，可是也好乱，自己搭建一边，做个整理吧</p>
<h3 id="安装相应的软件">安装相应的软件</h3><p>首先<code>yum update</code>更新下源.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install wget <span class="built_in">bind</span>-utils</span><br><span class="line">wget http://mirror.nl.leaseweb.net/epel/<span class="number">6</span>/i386/epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm</span><br><span class="line">rpm -ivh ./epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum install openswan</span><br><span class="line">yum install ppp xl2tpd</span><br><span class="line">yum install lsof man</span><br></pre></td></tr></table></figure></p>
<p>ppp是用于管理VPN用户的,我这里出现了问题,xl2tpd找不到源,解决办法是:到<a href="http://pkgs.org/" target="_blank" rel="external">pkgs.org</a>这个网站去搜,我就找到了相应的最新版<a href="http://pkgs.org/centos-6/epel-i386/xl2tpd-1.3.6-1.el6.i686.rpm.html" target="_blank" rel="external">地址</a><br>接下来就是找到相应的文件下载,然后安装<code>yum install xl2tpd-1.3.6-1.el6.i686.rpm</code></p>
<h3 id="配置内核与防火墙">配置内核与防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//设置 iptables 的数据包转发</span><br><span class="line">iptables --table nat --append POSTROUTING --jump MASQUERADE</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.ip_forward = 1"</span> |  tee <span class="operator">-a</span> /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">//是否接受ICMP转发,如果不是路由器，该值需要设置为 <span class="number">0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.conf.all.accept_redirects = 0"</span> |  tee <span class="operator">-a</span> /etc/sysctl.conf</span><br><span class="line">//是否发送ICMP转发(redirect)如果服务器不作为网关/路由器,该值建议设置为<span class="number">0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.conf.all.send_redirects = 0"</span> |  tee <span class="operator">-a</span> /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> vpn <span class="keyword">in</span> /proc/sys/net/ipv4/conf/*; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="number">0</span> &gt; <span class="variable">$vpn</span>/accept_redirects; <span class="built_in">echo</span> <span class="number">0</span> &gt; <span class="variable">$vpn</span>/send_redirects; <span class="keyword">done</span></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
<h3 id="其他配置">其他配置</h3><ul>
<li>编辑<code>/etc/rc.local</code>在结尾添加</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Correct ICMP Redirect issues with OpenSWAN</span></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> /proc/sys/net/ipv4/conf/*; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="number">0</span> &gt; <span class="variable">$each</span>/accept_redirects</span><br><span class="line">        <span class="built_in">echo</span> <span class="number">0</span> &gt; <span class="variable">$each</span>/send_redirects</span><br><span class="line">        <span class="built_in">echo</span> <span class="number">0</span> &gt; <span class="variable">$each</span>/rp_filter</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<ul>
<li>编辑 /etc/ipsec.conf ,我的配置如下:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/ipsec.conf - Openswan IPsec configuration file</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Manual:     ipsec.conf.5</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please place your own config files in /etc/ipsec.d/ ending in .conf</span></span><br><span class="line"></span><br><span class="line">version <span class="number">2.0</span>     <span class="comment"># conforms to second version of ipsec.conf specification</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># basic configuration</span></span><br><span class="line">config setup</span><br><span class="line">        interfaces=<span class="string">"%defaultroute"</span></span><br><span class="line">        <span class="comment"># Debug-logging controls:  "none" for (almost) none, "all" for lots.</span></span><br><span class="line">        klipsdebug=none</span><br><span class="line">        plutodebug=<span class="string">"none"</span></span><br><span class="line">        plutostderrlog=/var/<span class="built_in">log</span>/pluto.log</span><br><span class="line">        <span class="comment"># For Red Hat Enterprise Linux and Fedora, leave protostack=netkey</span></span><br><span class="line">        protostack=netkey</span><br><span class="line">        nat_traversal=yes</span><br><span class="line">        oe=off</span><br><span class="line">        <span class="comment"># Enable this if you see "failed to find any available worker"</span></span><br><span class="line">        nhelpers=<span class="number">0</span></span><br><span class="line">        virtual_private=%v4:<span class="number">10.0</span>.<span class="number">0.0</span>/<span class="number">8</span>,%v4:<span class="number">192.168</span>.<span class="number">0.0</span>/<span class="number">16</span>,%v4:<span class="number">172.16</span>.<span class="number">0.0</span>/<span class="number">12</span></span><br><span class="line"></span><br><span class="line">conn L2TP-PSK</span><br><span class="line">       authby=secret</span><br><span class="line">       pfs=no</span><br><span class="line">       auto=add</span><br><span class="line">       keyingtries=<span class="number">3</span></span><br><span class="line">       rekey=no</span><br><span class="line">       <span class="built_in">type</span>=transport</span><br><span class="line">       forceencaps=yes</span><br><span class="line">       right=%any</span><br><span class="line">       rightsubnet=vhost:%any,%priv</span><br><span class="line">       rightprotoport=<span class="number">17</span>/%any</span><br><span class="line">       left=%defaultroute</span><br><span class="line"></span><br><span class="line">       leftprotoport=<span class="number">17</span>/<span class="number">1701</span></span><br><span class="line">       <span class="comment"># Apple iOS doesn't send delete notify so we need dead peer detection</span></span><br><span class="line">       <span class="comment"># to detect vanishing clients</span></span><br><span class="line">       dpddelay=<span class="number">10</span></span><br><span class="line">       dpdtimeout=<span class="number">90</span></span><br><span class="line">       dpdaction=clear</span><br><span class="line"></span><br><span class="line"><span class="comment">#You may put your configuration (.conf) file in the "/etc/ipsec.d/" and uncomment this.</span></span><br><span class="line"><span class="comment">#include /etc/ipsec.d/*.conf</span></span><br></pre></td></tr></table></figure>
<ul>
<li>编辑/etc/ipsec.secrets</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ipsec.secrets</span><br><span class="line"><span class="comment">#include /etc/ipsec.d/*.secrets</span></span><br><span class="line">你的公网IP     %any:PSK     <span class="string">"任意的密钥"</span></span><br></pre></td></tr></table></figure>
<p>此时<code>ipsec verify</code>运行检查配置效果,我的如下:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Checking your <span class="keyword">system</span> <span class="built_in">to</span> see <span class="keyword">if</span> IPsec got installed <span class="operator">and</span> started correctly:</span><br><span class="line">Version check <span class="operator">and</span> ipsec <span class="command"><span class="keyword">on</span>-path                                 [<span class="title">OK</span>]</span></span><br><span class="line">Linux Openswan U2<span class="number">.6</span><span class="number">.32</span>/K2<span class="number">.6</span><span class="number">.32</span>-<span class="number">504.3</span><span class="number">.3</span>.el6.i686 (netkey)</span><br><span class="line">Checking <span class="keyword">for</span> IPsec support <span class="operator">in</span> kernel                            [OK]</span><br><span class="line"> SAref kernel support                                           [N/A]</span><br><span class="line"> NETKEY:  Testing <span class="keyword">for</span> disabled ICMP send_redirects              [OK]</span><br><span class="line">NETKEY detected, testing <span class="keyword">for</span> disabled ICMP accept_redirects     [OK]</span><br><span class="line">Checking that pluto is running                                  [OK]</span><br><span class="line"> Pluto listening <span class="keyword">for</span> IKE <span class="command"><span class="keyword">on</span> <span class="title">udp</span> <span class="title">500</span>                             [<span class="title">OK</span>]</span></span><br><span class="line"> Pluto listening <span class="keyword">for</span> NAT-T <span class="command"><span class="keyword">on</span> <span class="title">udp</span> <span class="title">4500</span>                          [<span class="title">OK</span>]</span></span><br><span class="line">Two <span class="operator">or</span> more interfaces found, checking IP forwarding            [OK]</span><br><span class="line">Checking NAT <span class="operator">and</span> MASQUERADEing                                  [OK]</span><br><span class="line">Checking <span class="keyword">for</span> <span class="string">'ip'</span> <span class="command"><span class="keyword">command</span>                                       [<span class="title">OK</span>]</span></span><br><span class="line">Checking /bin/sh is <span class="operator">not</span> /bin/dash                               [OK]</span><br><span class="line">Checking <span class="keyword">for</span> <span class="string">'iptables'</span> <span class="command"><span class="keyword">command</span>                                 [<span class="title">OK</span>]</span></span><br><span class="line">Opportunistic Encryption Support                                [DISABLED]</span><br></pre></td></tr></table></figure>
<p>这里遇到问题则一定要先解决了.哪一项不过就google解决哪一项.</p>
<ul>
<li>编辑 /etc/xl2tpd/xl2tpd.conf</li>
</ul>
<p><code>vi /etc/xl2tpd/xl2tpd.conf</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">;</span><br><span class="line">; This is a minimal sample xl2tpd configuration file <span class="keyword">for</span> use</span><br><span class="line">; with L2TP over IPsec.</span><br><span class="line">;</span><br><span class="line">; The idea is to provide an L2TP daemon to <span class="built_in">which</span> remote Windows L2TP/IPsec</span><br><span class="line">; clients connect. In this example, the internal (protected) network</span><br><span class="line">; is <span class="number">192.168</span>.<span class="number">1.0</span>/<span class="number">24</span>.  A special IP range within this network is reserved</span><br><span class="line">; <span class="keyword">for</span> the remote clients: <span class="number">192.168</span>.<span class="number">1.128</span>/<span class="number">25</span></span><br><span class="line">; (i.e. <span class="number">192.168</span>.<span class="number">1.128</span> ... <span class="number">192.168</span>.<span class="number">1.254</span>)</span><br><span class="line">;</span><br><span class="line">; The listen-addr parameter can be used <span class="keyword">if</span> you want to <span class="built_in">bind</span> the L2TP daemon</span><br><span class="line">; to a specific IP address instead of to all interfaces. For instance,</span><br><span class="line">; you could <span class="built_in">bind</span> it to the interface of the internal LAN (e.g. <span class="number">192.168</span>.<span class="number">1.98</span></span><br><span class="line">; <span class="keyword">in</span> the example below). Yet another IP address (<span class="built_in">local</span> ip, e.g. <span class="number">192.168</span>.<span class="number">1.99</span>)</span><br><span class="line">; will be used by xl2tpd as its address on pppX interfaces.</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">; listen-addr = <span class="number">192.168</span>.<span class="number">1.98</span></span><br><span class="line">;</span><br><span class="line">; requires openswan-<span class="number">2.5</span>.<span class="number">18</span> or higher - Also does not yet work <span class="keyword">in</span> combination</span><br><span class="line">; with kernel mode l2tp as present <span class="keyword">in</span> linux <span class="number">2.6</span>.<span class="number">23</span>+</span><br><span class="line">ipsec saref = no</span><br><span class="line">; Use refinfo of <span class="number">22</span> <span class="keyword">if</span> using an SAref kernel patch based on openswan <span class="number">2.6</span>.<span class="number">35</span> or</span><br><span class="line">;  when using any of the SAref kernel patches <span class="keyword">for</span> kernels up to <span class="number">2.6</span>.<span class="number">35</span>.</span><br><span class="line">; saref refinfo = <span class="number">30</span></span><br><span class="line">;</span><br><span class="line">; force userspace = yes</span><br><span class="line">;</span><br><span class="line">; debug tunnel = yes</span><br><span class="line"></span><br><span class="line">[lns default]</span><br><span class="line">ip range = <span class="number">192.168</span>.<span class="number">32.1</span>-<span class="number">192.168</span>.<span class="number">32.250</span></span><br><span class="line"><span class="built_in">local</span> ip = <span class="number">192.168</span>.<span class="number">32.252</span></span><br><span class="line">require chap = yes</span><br><span class="line">refuse pap = yes</span><br><span class="line">require authentication = yes</span><br><span class="line">name = LinuxVPNserver</span><br><span class="line">ppp debug = yes</span><br><span class="line">pppoptfile = /etc/ppp/options.xl2tpd</span><br><span class="line">length bit = yes</span><br></pre></td></tr></table></figure></p>
<ul>
<li>修改 /etc/ppp/options.xl2tpd</li>
</ul>
<p><code>vi /etc/ppp/options.xl2tpd</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">ipcp-accept-local</span><br><span class="line">ipcp-accept-remote</span><br><span class="line">ms-dns  <span class="number">8.8</span>.<span class="number">8.8</span></span><br><span class="line">ms-dns  <span class="number">8.8</span>.<span class="number">4.4</span></span><br><span class="line"><span class="comment"># ms-dns  192.168.1.1</span></span><br><span class="line"><span class="comment"># ms-dns  192.168.1.3</span></span><br><span class="line"><span class="comment"># ms-wins 192.168.1.2</span></span><br><span class="line"><span class="comment"># ms-wins 192.168.1.4</span></span><br><span class="line">noccp</span><br><span class="line">auth</span><br><span class="line">crtscts</span><br><span class="line">idle <span class="number">1800</span></span><br><span class="line">mtu <span class="number">1410</span></span><br><span class="line">mru <span class="number">1410</span></span><br><span class="line">nodefaultroute</span><br><span class="line">debug</span><br><span class="line">lock</span><br><span class="line">proxyarp</span><br><span class="line">connect-delay <span class="number">5000</span></span><br><span class="line"><span class="comment"># To allow authentication against a Windows domain EXAMPLE, and require the</span></span><br><span class="line"><span class="comment"># user to be in a group "VPN Users". Requires the samba-winbind package</span></span><br><span class="line">require-mschap-v2</span><br><span class="line"><span class="comment"># plugin winbind.so</span></span><br><span class="line"><span class="comment"># ntlm_auth-helper '/usr/bin/ntlm_auth --helper-protocol=ntlm-server-1 --require-membership-of="EXAMPLE\\VPN Users"'</span></span><br><span class="line"><span class="comment"># You need to join the domain on the server, for example using samba:</span></span><br><span class="line"><span class="comment"># http://rootmanager.com/ubuntu-ipsec-l2tp-windows-domain-auth/setting-up-openswan-xl2tpd-with-native-windows-clients-lucid.html</span></span><br><span class="line">logfile /var/<span class="built_in">log</span>/ppp.log</span><br></pre></td></tr></table></figure></p>
<ul>
<li>添加用户</li>
</ul>
<p><code>vi /etc/ppp/chap-secrets</code> 在文件中按格式添加用户.</p>
<ul>
<li>使用的防火墙规则:</li>
</ul>
<p>这里直接放出我配置好的防火墙规则,这里真的是卡了好久,对iptables不是非常熟悉.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generated by iptables-save v1.4.7 on Mon Dec 22 21:49:43 2014</span></span><br><span class="line">*nat</span><br><span class="line">:PREROUTING ACCEPT [<span class="number">834</span>:<span class="number">63397</span>]</span><br><span class="line">:POSTROUTING ACCEPT [<span class="number">0</span>:<span class="number">0</span>]</span><br><span class="line">:OUTPUT ACCEPT [<span class="number">5</span>:<span class="number">365</span>]</span><br><span class="line">-A POSTROUTING <span class="operator">-s</span> <span class="number">192.168</span>.<span class="number">32.0</span>/<span class="number">24</span> -o eth0 -j MASQUERADE</span><br><span class="line">COMMIT</span><br><span class="line"><span class="comment"># Completed on Mon Dec 22 21:49:43 2014</span></span><br><span class="line"><span class="comment"># Generated by iptables-save v1.4.7 on Mon Dec 22 21:49:43 2014</span></span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [<span class="number">0</span>:<span class="number">0</span>]</span><br><span class="line">:FORWARD ACCEPT [<span class="number">0</span>:<span class="number">0</span>]</span><br><span class="line">:OUTPUT ACCEPT [<span class="number">300</span>:<span class="number">44294</span>]</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j ACCEPT</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport <span class="number">22</span> -j ACCEPT</span><br><span class="line">-A INPUT -p udp -m state --state NEW -m udp --dport <span class="number">1701</span> -j ACCEPT</span><br><span class="line">-A INPUT -p udp -m state --state NEW -m udp --dport <span class="number">500</span> -j ACCEPT</span><br><span class="line">-A INPUT -p udp -m state --state NEW -m udp --dport <span class="number">4500</span> -j ACCEPT</span><br><span class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">-A FORWARD <span class="operator">-d</span> <span class="number">192.168</span>.<span class="number">32.0</span>/<span class="number">24</span> -j ACCEPT</span><br><span class="line">-A FORWARD <span class="operator">-s</span> <span class="number">192.168</span>.<span class="number">32.0</span>/<span class="number">24</span> -j ACCEPT</span><br><span class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">COMMIT</span><br><span class="line"><span class="comment"># Completed on Mon Dec 22 21:49:43 2014</span></span><br></pre></td></tr></table></figure></p>
<h3 id="最后">最后</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">service xl2tpd restart</span><br><span class="line">service iptables restart</span><br><span class="line">chkconfig xl2tpd on</span><br><span class="line">chkconfig iptables on</span><br><span class="line">chkconfig ipsec on</span><br></pre></td></tr></table></figure>
<p>参考链接:<a href="http://linux.die.net/man/5/xl2tpd.conf" target="_blank" rel="external">http://linux.die.net/man/5/xl2tpd.conf</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>搭建了一个L2TP+IPSec的VPN,对于小菜来说着实花了一番功夫…记录过程与此<br>]]>
    
    </summary>
    
      <category term="CentOS" scheme="http://ohroot.com/tags/CentOS/"/>
    
      <category term="操作系统" scheme="http://ohroot.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[js匿名函数与感叹号]]></title>
    <link href="http://ohroot.com/2014/12/08/js%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E4%B8%8E%E6%84%9F%E5%8F%B9%E5%8F%B7/"/>
    <id>http://ohroot.com/2014/12/08/js匿名函数与感叹号/</id>
    <published>2014-12-08T13:46:22.000Z</published>
    <updated>2014-12-08T14:24:36.000Z</updated>
    <content type="html"><![CDATA[<p>关于javascript函数定义……<br><a id="more"></a></p>
<h2 id="函数的定义">函数的定义</h2><p>首先简单介绍一下函数的定义，大致介绍常见的两种<br>第一种<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">double</span><span class="params">(x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * x;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第二种：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> double = <span class="function"><span class="keyword">function</span><span class="params">(x)</span> </span>&#123; <span class="keyword">return</span> <span class="number">2</span>* x; &#125;</span><br></pre></td></tr></table></figure></p>
<p>注意<code>=</code>右边的函数就是一个匿名函数，创造完毕函数后，又将该函数赋给了变量square。</p>
<h2 id="匿名函数">匿名函数</h2><p>上面所讲的定义square函数的方式即为匿名函数，这也是最常用的方式之一。<br>还有一种方式，可能也是初学者比较困惑的方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">(x, y)</span></span>&#123;</span><br><span class="line">    alert(x + y);  </span><br><span class="line">&#125;)(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></p>
<p>这里创建了一个匿名函数(在第一个括号内)，第二个括号用于调用该匿名函数，并传入参数,然后函数顺次执行，并返回<code>undefined</code>。</p>
<h2 id="理论讲完了，讲点重点"><strong> 理论讲完了，讲点重点 </strong></h2><p>我之前看到别人这些写匿名函数很是困惑，匿名函数既然定义了之后就执行函数体，为什么不直接写代码呢，后来网上查阅了下，别人说的理由如下：</p>
<ul>
<li>避免占用全局变量名</li>
<li>参数保护,函数是独立作用域,传递参数可以保护临时变量,闭包可以保存循环中需要保留的临时变量,还有组件开发时将命名空间传递到函数中用闭包保护起来,即使命名空间被后面的代码重置,原变量被闭包保护将仍然生存</li>
<li>降低风险,因为没有变量名,中间代码又被闭包保护,js注入无法访问,减少被攻击风险</li>
</ul>
<p>好吧，好处显而易见</p>
<hr>
<h2 id="神奇的感叹号">神奇的感叹号</h2><p>后来我又看到类似这样的代码<code>!function(){alert(&#39;ohroot&#39;)}()</code>，在函数定义前面加了个<code>!</code>,函数体内代码正常执行，返回值<code>undefined</code>,瞬间又达到了匿名函数的效果。</p>
<p>我们一般匿名函数长得像这样:<br><code>(function(){alert(&#39;ohroot&#39;)})()// true</code><br>或者：<br><code>(function(){alert(&#39;ohroot&#39;)}())// true</code></p>
<p>其实无论是括号，还是感叹号，让整个语句合法做的事情只有一件，就是让一个函数声明语句变成了一个表达式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span></span>&#123;alert(<span class="string">'ohroot'</span>)&#125;<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p>
<p>这是一个函数声明，如果在这么一个声明后直接加上括号调用，解析器自然不会理解而报错：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span></span>&#123;alert(<span class="string">'ohroot'</span>)&#125;()<span class="comment">// SyntaxError: unexpected_token</span></span><br></pre></td></tr></table></figure></p>
<p>因为这样的代码混淆了函数声明和函数调用，以这种方式声明的函数a，就应该以a();的方式调用。</p>
<p>但是括号则不同，它将一个函数声明转化成了一个表达式，解析器不再以函数声明的方式处理函数a，而是作为一个函数表达式处理，也因此只有在程序执行到函数a时它才能被访问。所以，任何消除函数声明和函数表达式间歧义的方法，都可以被解析器正确识别。比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">10</span>&#125;();<span class="comment">// undefined  </span></span><br><span class="line"><span class="number">1</span> &amp;&amp; <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;();<span class="comment">// true  </span></span><br><span class="line"><span class="number">1</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;alert(<span class="string">'ohroot'</span>)&#125;();<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p>
<p>赋值，逻辑，甚至是逗号，各种操作符都可以告诉解析器，这个不是函数声明，它是个函数表达式。并且，对函数一元运算可以算的上是消除歧义最快的方式，感叹号只是其中之一，如果不在乎返回值，这些一元运算都是有效的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;alert(<span class="string">'ohroot'</span>)&#125;()<span class="comment">// true</span></span><br><span class="line">+<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;alert(<span class="string">'ohroot'</span>)&#125;()<span class="comment">// NaN</span></span><br><span class="line">-<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;alert(<span class="string">'ohroot'</span>)&#125;()<span class="comment">// NaN</span></span><br><span class="line">~<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;alert(<span class="string">'ohroot'</span>)&#125;()<span class="comment">// -1</span></span><br></pre></td></tr></table></figure></p>
<p>甚至下面这些关键字，都能很好的工作：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;alert(<span class="string">'ohroot'</span>)&#125;()<span class="comment">// undefined  </span></span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;alert(<span class="string">'ohroot'</span>)&#125;()<span class="comment">// Object  </span></span><br><span class="line"><span class="keyword">delete</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;alert(<span class="string">'ohroot'</span>)&#125;()<span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>
<p>最后，括号做的事情也是一样的，消除歧义才是它真正的工作，而不是把函数作为一个整体，所以无论括号括在声明上还是把整个函数都括在里面，都是合法的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;alert(<span class="string">'ohroot'</span>)&#125;)()<span class="comment">// undefined</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;alert(<span class="string">'ohroot'</span>)&#125;())<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p>
<p>参考文章：<a href="http://swordair.com/function-and-exclamation-mark/" target="_blank" rel="external">function与感叹号</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>关于javascript函数定义……<br>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://ohroot.com/tags/javascript/"/>
    
      <category term="编程" scheme="http://ohroot.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hydra使用手记]]></title>
    <link href="http://ohroot.com/2014/11/24/hydra%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"/>
    <id>http://ohroot.com/2014/11/24/hydra使用手记/</id>
    <published>2014-11-24T13:26:24.000Z</published>
    <updated>2015-03-12T14:00:49.000Z</updated>
    <content type="html"><![CDATA[<p>听说hydra这个工具很好用，自己一直没探索过，以前做Dsploit二次开发的时候就晓得了这个强大的工具，今天试玩一下。<br><a id="more"></a></p>
<p>简明试玩手记，就不讲述怎么安装云云了</p>
<h2 id="参数说明">参数说明</h2><pre><code>hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]] [-e ns]
[-o FILE] [-t TASKS] [-M FILE [-T TASKS]] [-w TIME] [-f] [-s PORT] [-S] [-vV] server service [OPT]
-<span class="ruby"><span class="constant">R</span> 继续从上一次进度接着破解。
</span>-<span class="ruby"><span class="constant">S</span> 采用<span class="constant">SSL</span>链接。
</span>-<span class="ruby">s <span class="constant">PORT</span> 可通过这个参数指定非默认端口。
</span>-<span class="ruby">l <span class="constant">LOGIN</span> 指定破解的用户，对特定用户破解。
</span>-<span class="ruby"><span class="constant">L</span> <span class="constant">FILE</span> 指定用户名字典。
</span>-<span class="ruby">p <span class="constant">PASS</span> 小写，指定密码破解，少用，一般是采用密码字典。
</span>-<span class="ruby"><span class="constant">P</span> <span class="constant">FILE</span> 大写，指定密码字典。
</span>-<span class="ruby">e ns 可选选项，n：空密码试探，s：使用指定用户和密码试探。
</span>-<span class="ruby"><span class="constant">C</span> <span class="constant">FILE</span> 使用冒号分割格式，例如“登录名<span class="symbol">:</span>密码”来代替-<span class="constant">L</span>/-<span class="constant">P</span>参数。
</span>-<span class="ruby"><span class="constant">M</span> <span class="constant">FILE</span> 指定目标列表文件一行一条。
</span>-<span class="ruby">o <span class="constant">FILE</span> 指定结果输出文件。
</span>-<span class="ruby">f 在使用-<span class="constant">M</span>参数以后，找到第一对登录名或者密码的时候中止破解。
</span>-<span class="ruby">t <span class="constant">TASKS</span> 同时运行的线程数，默认为<span class="number">16</span>。
</span>-<span class="ruby">w <span class="constant">TIME</span> 设置最大超时的时间，单位秒，默认是<span class="number">30</span>s。
</span>-<span class="ruby">v / -<span class="constant">V</span> 显示详细过程。
</span>server 目标ip
service 指定服务名，支持的服务和协议：telnet ftp pop3[-ntlm] imap[-ntlm] smb smbnt http-{head|get} http-{get|post}-form http-proxy cisco cisco-enable vnc ldap2 ldap3 mssql mysql oracle-listener postgres nntp socks5 rexec rlogin pcnfs snmp rsh cvs svn icq sapr3 ssh smtp-auth[-ntlm] pcanywhere teamspeak sip vmauthd firebird ncp afp等等。
OPT 可选项
</code></pre><h2 id="测试实例">测试实例</h2><ol>
<li><p>破解ssh：(测试成功)<br><code>hydra ip ssh -l 用户名 -P 密码字典 -t 线程 -o save.log -vV</code></p>
</li>
<li><p>破解ftp：(测试成功)<br><code>hydra ip ftp -l 用户名 -P 密码字典 -t 线程(默认16) -vV</code></p>
</li>
<li><p>get方式提交，破解web登录：(测试成功)<br><code>hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns -f ip http-get /admin/index.php</code></p>
</li>
<li><p>post方式提交，破解web登录：(测试成功)<br><code>hydra -l 用户名 -P 密码字典 -s 80 ip http-post-form &quot;/admin/login.php:username=^USER^&amp;password=^PASS^&amp;submit=login:sorry password&quot;</code><br>引号里面冒号分隔URL、POST内容、错误回显</p>
</li>
<li><p>破解https：<br><code>hydra -m /index.php -l muts -P pass.txt 10.36.16.18 https</code></p>
</li>
<li><p>破解teamspeak：<br><code>hydra -l 用户名 -P 密码字典 -s 端口号 -vV ip teamspeak</code></p>
</li>
<li><p>破解cisco：<br><code>hydra -P pass.txt 10.36.16.18 cisco</code><br><code>hydra -m cloud -P pass.txt 10.36.16.18 cisco-enable</code></p>
</li>
<li><p>破解smb：<br><code>hydra -l administrator -P pass.txt 10.36.16.18 smb</code></p>
</li>
<li><p>破解pop3：<br><code>hydra -l muts -P pass.txt my.pop3.mail pop3</code></p>
</li>
<li><p>破解rdp：<br><code>hydra ip rdp -l administrator -P pass.txt -V</code></p>
</li>
<li><p>破解http-proxy：<br><code>hydra -l admin -P pass.txt http-proxy://10.36.16.18</code></p>
</li>
<li><p>破解imap：<br><code>hydra -L user.txt -p secret 10.36.16.18 imap PLAIN</code><br><code>hydra -C defaults.txt -6 imap://[fe80::2c:31ff:fe12:ac11]:143/PLAIN</code></p>
</li>
</ol>
<p>参考文章：<a href="http://www.ha97.com/5186.html" target="_blank" rel="external">Linux下的暴力密码在线破解工具Hydra详解</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>听说hydra这个工具很好用，自己一直没探索过，以前做Dsploit二次开发的时候就晓得了这个强大的工具，今天试玩一下。<br>]]>
    
    </summary>
    
      <category term="渗透测试" scheme="http://ohroot.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="渗透测试" scheme="http://ohroot.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nexus 7 刷机]]></title>
    <link href="http://ohroot.com/2014/11/18/nexus-7-%E5%88%B7%E6%9C%BA/"/>
    <id>http://ohroot.com/2014/11/18/nexus-7-刷机/</id>
    <published>2014-11-18T05:37:16.000Z</published>
    <updated>2014-11-18T07:35:11.000Z</updated>
    <content type="html"><![CDATA[<p>本文关于nexus7刷机，更多是记录下资源。<br><a id="more"></a><br>Nexus 7 刷了一个Pwn Pad玩了一下，感觉有些地方不是很好用，所以还是刷回android原生系统。记录下流程</p>
<h2 id="刷官方ROM">刷官方ROM</h2><ul>
<li>使用<code>adb reboot bootloader</code>进入fastboot模式。</li>
<li><code>sudo fastboot oem unlock</code>解锁bootloader。</li>
<li>下载相应的包链接：<code>https://developers.google.com/android/nexus/images#razor2</code></li>
<li>解压，执行其中的:<code>flash-all.sh</code></li>
</ul>
<h2 id="关于root">关于root</h2><p>主要参考了这篇文章<a href="http://itsfoss.com/root-nexus-7-2013-ubuntu-linux/" target="_blank" rel="external">http://itsfoss.com/root-nexus-7-2013-ubuntu-linux/</a><br>主要命令：<br><code>sudo fastboot flash recovery ~/Path-to-TWRP.img</code><br><code>sudo fastboot boot ~/Path-To-The-Image/CF-Auto-Root-flo-razor-nexus7.img</code></p>
<p>资源参考链接：<br><a href="http://techerrata.com/browse/twrp2/flo" target="_blank" rel="external">http://techerrata.com/browse/twrp2/flo</a><br><a href="http://download.chainfire.eu/347/CF-Root/CF-Auto-Root/CF-Auto-Root-flo-razor-nexus7.zip" target="_blank" rel="external">http://download.chainfire.eu/347/CF-Root/CF-Auto-Root/CF-Auto-Root-flo-razor-nexus7.zip</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文关于nexus7刷机，更多是记录下资源。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://ohroot.com/tags/Android/"/>
    
      <category term="Android" scheme="http://ohroot.com/categories/Android/"/>
    
  </entry>
  
</feed>